apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: go1.22-build
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Build Tools
    tekton.dev/tags: build-tool
    tekton.dev/displayName: "golang build"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This Task is Golang task to build Go projects.
  params:
  - name: workbase
    description: base package to build in
  - name: packages
    description: "packages to build (default: ./cmd/...)"
    default: "./cmd/..."
  - name: version
    description: golang version to use for builds
    default: "latest"
  - name: flags
    description: flags to use for the test command
    default: -v
  - name: GOOS
    description: "running program's operating system target"
    default: linux
  - name: GOARCH
    description: "running program's architecture target"
    default: amd64
  - name: GO111MODULE
    description: "value of module support"
    default: auto
  - name: GOCACHE
    description: "Go caching directory path"
    default: ""
  - name: GOMODCACHE
    description: "Go mod caching directory path"
    default: ""
  - name: CGO_ENABLED
    description: "Toggle cgo tool during Go build. Use value '0' to disable cgo (for static builds)."
    default: "0"
  - name: GOSUMDB
    description: "Go checksum database url. Use value 'off' to disable checksum validation."
    default: ""
  - name: GOPROXY
    default: "https://goproxy.cn,direct"
  workspaces:
  - name: source
  results:
    - name: version
    - name: timestamp
  steps:
  - name: build
    image: registry.cn-beijing.aliyuncs.com/fpf_devops/golang:1.22-rc
    workingDir: $(workspaces.source.path)
    script: |
      go version
      cd $(params.workbase)
      IMAGE_VERSION="$(cat VERSION)"
      printf "%s" "${IMAGE_VERSION}" > "$(results.version.path)"
      go build $(params.flags) $(params.packages) 
    env:
    - name: GOOS
      value: "$(params.GOOS)"
    - name: GOARCH
      value: "$(params.GOARCH)"
    - name: GO111MODULE
      value: "$(params.GO111MODULE)"
    - name: GOCACHE
      value: "$(params.GOCACHE)"
    - name: GOMODCACHE
      value: "$(params.GOMODCACHE)"
    - name: CGO_ENABLED
      value: "$(params.CGO_ENABLED)"
    - name: GOSUMDB
      value: "$(params.GOSUMDB)"
    - name: GOPROXY
      value: "$(params.GOPROXY)"
  - name: get-timestamp
    image: repo.cicc.com.cn/public-docker-virtual/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
    script: |
      #!/usr/bin/env bash
      set -e
      timestamp=$(date +%Y%m%d%H%M%S)
      printf "%s" "${timestamp}" > "$(results.timestamp.path)"
    volumeMounts:
      - name: host-time
        mountPath: /etc/localtime

