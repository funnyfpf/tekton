apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    fiops/author: fanpengfei
    tekton.dev/categories: Build Tools
    tekton.dev/displayName: golang build
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/tags: build-tool
  creationTimestamp: "2024-03-11T12:20:34Z"
  labels:
    app.kubernetes.io/version: "0.3"
  name: go1.19-build-lizardcd
  namespace: default
spec:
  description: This Task is Golang task to build Go projects.
  params:
  - description: base package to build in
    name: workbase
    type: string
  - default: ./cmd/...
    description: 'packages to build (default: ./cmd/...)'
    name: packages
    type: string
  - default: latest
    description: golang version to use for builds
    name: version
    type: string
  - default: -v
    description: flags to use for the test command
    name: flags
    type: string
  - default: linux
    description: running program's operating system target
    name: GOOS
    type: string
  - default: amd64
    description: running program's architecture target
    name: GOARCH
    type: string
  - default: auto
    description: value of module support
    name: GO111MODULE
    type: string
  - default: ""
    description: Go caching directory path
    name: GOCACHE
    type: string
  - default: ""
    description: Go mod caching directory path
    name: GOMODCACHE
    type: string
  - default: "0"
    description: Toggle cgo tool during Go build. Use value '0' to disable cgo (for
      static builds).
    name: CGO_ENABLED
    type: string
  - default: ""
    description: Go checksum database url. Use value 'off' to disable checksum validation.
    name: GOSUMDB
    type: string
  - default: https://goproxy.cn,direct
    name: GOPROXY
    type: string
  results:
  - name: version
    type: string
  - name: timestamp
    type: string
  steps:
  - computeResources: {}
    env:
    - name: GOOS
      value: $(params.GOOS)
    - name: GOARCH
      value: $(params.GOARCH)
    - name: GO111MODULE
      value: $(params.GO111MODULE)
    - name: GOCACHE
      value: $(params.GOCACHE)
    - name: GOMODCACHE
      value: $(params.GOMODCACHE)
    - name: CGO_ENABLED
      value: $(params.CGO_ENABLED)
    - name: GOSUMDB
      value: $(params.GOSUMDB)
    - name: GOPROXY
      value: $(params.GOPROXY)
    image: registry.cn-beijing.aliyuncs.com/fpf_devops/goctl:1.4.2
    name: build
    script: |
      go version
      IMAGE_VERSION="$(cat VERSION)"
      printf "%s" "${IMAGE_VERSION}" > "$(results.version.path)"
      cd $(params.workbase)
      export GOOS=linux
      export GOARCH=amd64
      export BINARY=$(params.packages)
      make
      timestamp=$(date +%Y%m%d%H%M%S)
      printf "%s" "${timestamp}" > "$(results.timestamp.path)"
    volumeMounts:
    - mountPath: /etc/localtime
      name: host-time
    - mountPath: /go
      name: dependence
    workingDir: $(workspaces.source.path)
  volumes:
  - hostPath:
      path: /etc/localtime
    name: host-time
  - name: dependence
    persistentVolumeClaim:
      claimName: go-dependence
  workspaces:
  - name: source
